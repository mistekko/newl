#! /usr/bin/env sh

. "$HOME/.cache/wal/colors.sh"
dmenu_cmd="dmenu -p theme:  -nb $color0 -nf $color7 -sb $color9 -sf $color15"
theme_dir="$HOME/.local/share/wal-themes"
name="$(basename "$0")"
usage_message="Usage:
        $name                   choose a theme using dmenu and apply it
        $name h/-h/--help       print this help and exit

        $name a THEME           apply THEME
        $name d THEME           delete THEME
        $name e THEME           open THEME's colours.json in \$EDITOR ($EDITOR)
        $name i THEME           print info on current wallpaper if such exists
        $name l                 list valid theme names
	$name l-icewm-menu      format list of themes for an icewm menu entry
        $name n THEME           create 'THEME' from current pywal cache
	$name p THEME           edit a theme's post-application script
        $name r                 apply random theme
        $name s                 select theme graphically and apply it
        $name u THEME           write current pywal configuration to 'THEME'"

icon_size="16" # for theme icon generation, e.g. for icewm menus
isxis="${icon_size}x${icon_size}"
xresources="$XDG_CONFIG_HOME/X11/Xresources"

# customize this function according to your setup. Its pre-
# loaded with my settings, but you'll want to adjust to your
# setup
update () {
		emacsclient -ue "(progn (load-theme 'ewal-spacemacs-modern)
(modify-all-frames-parameters '((alpha-background . $alpha)))
(adjust-region-faces))" &
		xrdb "$xresources" > /dev/null &
		dwmc xrdb &
		pywalfox update > /dev/null &
		[ -e "$prefix/post-app.sh" ] && sh "$prefix/post-app.sh"
}

validate_theme () {
	[ -d "$theme_dir/$arg" ] && return 0
	return 1
}

ensure_theme () {
	if [ -z "$arg" ]; then
		arg="$(ls "$theme_dir" | $dmenu_cmd)"
		[ -z "$arg" ] &&
			echo "No theme chosen." >&2 &&
			return 1
	fi
	validate_theme || (echo "'$arg' is not a valid theme." >&2 &&
			   return 1)
}

get_current_if_ours () {
	test="$(basename "$(grep "wallpaper" \
	                         "$HOME/.cache/wal/colors.json" |
	                    sed 's+/[^/]*/[^/]*$++g')")"
	if [ "$test" = "$(basename "$theme_dir")" ]; then
		arg="$(grep "wallpaper" \
		            "$HOME/.cache/wal/colors.json" |
		       sed 's+/[^/]*$++g')"
		arg="$(basename "$arg")"
		return 0
	else
		echo "Current theme is not managed by newl" >&2
		return 1
	fi
}

ensure_arg_c_possible () {
	failure=""
	if [ "$arg" = "c" ]; then
		get_current_if_ours || failure="y"
	else
		ensure_theme || failure="y"
	fi
	if [ $failure ]; then
		echo "Exiting..."
		exit 1
	fi
}

command="$1"
arg="$2"

case "$command" in
	"")
		$0 a ;;
	"h"|"-h"|"--help")
		echo "$usage_message" ;;
	"l")
		ls "$theme_dir" ;;
	"l-icewm-menu")
		for theme in $(ls "$theme_dir"); do
			echo "prog \"$theme\" \"$theme_dir/$theme/icon\" newl a \"$theme\""
		done ;;
	"r")
		newl a "$(newl l | shuf -n 1)" ;;
	"s")
		# customise WM_CLASS/instance so our sxiv can be targeted by WMs
		arg="$(sxiv -N "newl" -bort "$HOME/.local/share/wal-themes"/*/wallpaper)"
		if [ -z "$arg" ]; then
			echo "No theme selected. Exiting..."
			exit 1
		fi
		arg="$(echo "$arg" | sed 's+/wallpaper$++g' | xargs basename)"
	        newl a "$arg" ;;
	"n")
		if [ -z "$2" ]; then
			echo "You must supply a name for the new theme"
			exit 1
		elif validate_theme && [ -z "$3" ]; then
			echo "A theme named '$arg' already exists" \
		             "To update it, use the 'u' command" >&2
			exit 1
		fi
		# extracts filename from JSON
		dest_dir="$theme_dir/$arg"
		wp_orig="$(grep wallpaper "$HOME/.cache/wal/colors.json" |
				      cut -c 19- | sed s/..$//g)"
		colours_orig="$HOME/.cache/wal/colors.json"
		wp_dest="$dest_dir/wallpaper"
		colours_dest="$dest_dir/colours.json"
		mkdir -p "$dest_dir"
		[ "$wp_orig" != "None" ] && cp -f "$wp_orig" "$wp_dest"
		# Fix paths; we could use sed but that'd be unreadable and
		# unnecessarily complex
		head -n 2 "$colours_orig" > "$colours_dest"
		echo "    \"wallpaper\": \"$wp_dest\"," \
		     >> "$colours_dest"
	        tail -n 26 "$colours_orig" >> "$colours_dest"
		magick "$wp_dest" -scale x${icon_size} - |
			magick - -crop $isxis -format png - > "$dest_dir/icon";;
	"a")
		ensure_arg_c_possible
		prefix="$theme_dir/$arg"
		alpha="$(grep "\"alpha\": \"" "$prefix/colours.json" |
		         grep -o -E "[0-9]{2}[0-9]?")"
		wal -f "$prefix/colours.json" > /dev/null
		update ;;
	"i")
		ensure_arg_c_possible
		[ -e "$theme_dir/$arg/info" ] && cat "$theme_dir/$arg/info" ;;
	"e")
		ensure_arg_c_possible
		$EDITOR "$theme_dir/$arg/colours.json" ;;
	"p")
		ensure_arg_c_possible
		if [ -e "$theme_dir/$arg/post-app.sh" ]; then
			$EDITOR "$theme_dir/$arg/post-app.sh"
		else
			printf "#! /usr/bin/env sh\n\n" > \
			       "$theme_dir/$arg/post-app.sh"
			$0 p "$arg"
		fi ;;
	"d")
		if [ -z "$arg" ]; then
			echo "To prevent irreversible deletion of the wrong" \
			     "theme, $name requires explicit specification of" \
			     "target"
			exit 1
		fi
		ensure_arg_c_possible
		rm -r "$theme_dir/$arg" ;;
	"u")
		ensure_arg_c_possible
		$0 n "$arg" "--force" ;;
	*)
		echo "'$command' is not a valid command" >&2 ;;
esac
